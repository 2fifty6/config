function update_gitprompt {
	COMMITS=""
	BEHIND_HEAD=""
	NUM_AHEAD="$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)"
	NUM_BEHIND="$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)"
	if [[ $NUM_AHEAD -ne 0 && $NUM_BEHIND -eq 0 ]]; then
		if [[ $NUM_AHEAD -eq 1 ]]; then
			COMMITS="¹"
		elif [[ $NUM_AHEAD -eq 2 ]]; then
			COMMITS="²"
		elif [[ $NUM_AHEAD -eq 3 ]]; then
			COMMITS="³"
		else
			COMMITS="¨"
		fi
	elif [[ $NUM_BEHIND -ne 0 && $NUM_AHEAD -eq 0 ]]; then
		BEHIND_HEAD="«"
	elif [[ $NUM_AHEAD -ne 0 && $NUM_BEHIND -ne 0 ]]; then
		BEHIND_HEAD="«"
		COMMITS="»"
	fi
	zstyle ':vcs_info:*' formats "$PR_WHITE$BEHIND_HEAD%u%b%c$COMMITS$PR_NO_COLOUR"
	zstyle ':vcs_info:*' stagedstr "$PR_GREEN*"
	zstyle ':vcs_info:*' unstagedstr "$PR_RED"
	zstyle ':vcs_info:*' check-for-changes true
}

# vcs_info
setopt prompt_subst
autoload -Uz vcs_info
update_gitprompt
zstyle ':vcs_info:*' enable git

function precmd {
    LAST_RC=$?
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} + 1 ))
    ###
    # Truncate the path if it's too long.
    PR_FILLBAR=""
    PR_PWDLEN=""
    local promptsize=${#${(%):---(%n@%m:%l)---()--}}
    local pwdsize=${#${(%):-%~}}
    if [[ `echo ${(%):-%l} | wc -m` -gt 6 ]]; then
      (( promptsize=((${promptsize}-1)) ))
    fi
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
      # fix for mac terminal
      if [[ "`uname`" == "Darwin" ]]; then
        PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize + 1)))..${PR_HBAR}.)}"
      else
        PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
      fi
    fi
    ###
    update_gitprompt
    vcs_info
    [[ -z ${vcs_info_msg_0_} ]] && GITBRANCH=$(date +%m/%d/%Y) || GITBRANCH=${vcs_info_msg_0_}
    [[ $LAST_RC -ne 0 ]] && PAREN_COLOR=$PR_RED || PAREN_COLOR=$PR_BLUE
    GITBRANCH_STRING="$PAREN_COLOR( $PR_WHITE$GITBRANCH $PAREN_COLOR)"
}

setopt extended_glob
preexec () {
    if [[ "$TERM" == "screen" ]]; then
	local CMD=${1[(wr)^(*=*|sudo|-*)]}
	echo -n "\ek$CMD\e\\"
    fi
}

setprompt () {
    ###
    # Need this so the prompt will work.
    setopt prompt_subst

    ###
    # See if we can use colors.

    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
	colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	eval PR_BG_$color='%{$terminfo[no_bold]$fg[${(L)color}]%}'
	(( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    ###
    # See if we can use extended characters to look nicer.
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}
    ###
    # Decide if we need to set titlebar text.
    case $TERM in
	xterm*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac
    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
	PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	PR_STITLE=''
    fi
    GITBRANCH=$(git branch 2>/dev/null | grep \* | awk '{print $2;}')
	[[ -z $GITBRANCH ]] && GITBRANCH=$(date +%m/%d/%Y)
    ###
    # Finally, the prompt.

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_GREEN$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR$PR_SHIFT_OUT$PR_BLUE(\
$PR_RED %(!.%SROOT%s.%n)$PR_BG_WHITE @ $PR_RED%m \
$PR_BLUE)$PR_GREEN$PR_SHIFT_IN$PR_HBAR${(e)PR_FILLBAR}$PR_GREEN$PR_SHIFT_OUT$PR_BLUE( \
$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
$PR_BLUE )$PR_GREEN$PR_SHIFT_IN$PR_GREEN$PR_HBAR$PR_URCORNER$PR_SHIFT_OUT\

$PR_GREEN$PR_SHIFT_IN$PR_LLCORNER$PR_GREEN$PR_HBAR$PR_BLUE$PR_SHIFT_OUT(\
%(?..)\
 $PR_CYAN%D{%r} $PR_BLUE)\
%(!.$PR_RED.$PR_BLUE)$PR_GREEN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_WHITE %#\
$PR_GREEN$PR_SHIFT_IN$PR_SHIFT_OUT\
$PR_NO_COLOUR '

RPROMPT='$GITBRANCH_STRING$PR_SHIFT_IN$PR_GREEN$PR_HBAR$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

PS2='$PR_GREEN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_GREEN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_GREEN)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_GREEN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
}
